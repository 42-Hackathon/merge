name: Build/release Electron app

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build/release Electron app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            npm run make:win
          else
            npm run make:mac
          fi
        shell: bash

      - name: List build outputs
        run: |
          echo "=== Build outputs ==="
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            find out/make -type f -name "*.exe" 2>/dev/null || true
          else
            find out/make -type f \( -name "*.dmg" -o -name "*.zip" \) 2>/dev/null || true
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}
          path: |
            out/make/**/*.exe
            out/make/**/*.dmg
            out/make/**/*.zip
          retention-days: 1
          if-no-files-found: warn

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-latest
          path: windows-artifacts

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-latest
          path: macos-artifacts

      - name: Display structure of downloaded files
        run: |
          echo "Windows artifacts:"
          ls -la windows-artifacts/
          echo "macOS artifacts:"
          ls -la macos-artifacts/

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            windows-artifacts/*.exe
            macos-artifacts/*.dmg
            macos-artifacts/*.zip
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}